services:
  # PostgreSQL database
  db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-multitenant_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - multitenant-network

  # Run migrations (init container)
  migrations:
    build: .
    command: >
      sh -c "python manage.py migrate_schemas --shared &&
             python manage.py collectstatic --noinput"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - multitenant-network

  # Django web application
  web:
    build: .
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --reload --workers 2
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - multitenant-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  multitenant-network:
    driver: bridge
